@
@ +-------------------------------------------------------------------------+
@ |   This file	has been generated by The Interactive Disassembler (IDA)    |
@ |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>			    |
@ |			Doskey Lee, Kingsoft Internet Security Software				    |
@ +-------------------------------------------------------------------------+
@
@ Input	MD5   :	5366F56114EBD4C7FC252D3D56164D9D
@ Input	CRC32 :	ACCB3046

@ Format      :	Binary file

@ Processor	  : ARM
@ ARM architecture: ARMv7-M
@ Target assembler: GNU	assembler
@ Byte sex	  : Little endian

@ ===========================================================================

		.syntax	unified

@ ===========================================================================

		.section .isr_vectors

		.long Stack_Top
		.long Reset_Handler+1
		.long NMI_Handler+1
		.long HardFault_Handler+1
		.long MemManage_Handler+1
		.long BusFault_Handler+1
		.long UsageFault_Handler+1
		.long 0
		.long 0
		.long 0
		.long 0
		.long SVC_Handler+1
		.long DebugMon_Handler+1
		.long 0
		.long PendSV_Handler+1
		.long SysTick_Handler+1
		.long Default_Handler+1		@  0 : Brown-Out Detector
		.long Default_Handler+1		@  1 : Internal	RC
		.long Default_Handler+1		@  2 : Power down wake up
		.long Default_Handler+1		@  3 : RAM parity error
		.long Default_Handler+1		@  4 : Clock detection fail
		.long Default_Handler+1		@  5 : Reserved
		.long RTC_IRQHandler+1		@  6 : Real Time Clock
		.long Default_Handler+1		@  7 : Backup register tamper interrupt
		.long Default_Handler+1		@  8 : Watchdog	timer
		.long Default_Handler+1		@  9 : Window watchdog timer
		.long Default_Handler+1		@ 10 : External	Input 0
		.long Default_Handler+1		@ 11 : External	Input 1
		.long Default_Handler+1		@ 12 : External	Input 2
		.long Default_Handler+1		@ 13 : External	Input 3
		.long Default_Handler+1		@ 14 : External	Input 4
		.long Default_Handler+1		@ 15 : External	Input 5
		.long Default_Handler+1		@ 16 : GPIO Port A
		.long Default_Handler+1		@ 17 : GPIO Port B
		.long Default_Handler+1		@ 18 : GPIO Port C
		.long GPD_IRQHandler+1		@ 19 : GPIO Port D
		.long GPE_IRQHandler+1		@ 20 : GPIO Port E
		.long GPF_IRQHandler+1		@ 21 : GPIO Port F
		.long Default_Handler+1		@ 22 : SPI0
		.long Default_Handler+1		@ 23 : SPI1
		.long Default_Handler+1		@ 24 : PWM0 brake
		.long Default_Handler+1		@ 25 : PWM0 pair 0
		.long Default_Handler+1		@ 26 : PWM0 pair 1
		.long Default_Handler+1		@ 27 : PWM0 pair 2
		.long Default_Handler+1		@ 28 : PWM1 brake
		.long Default_Handler+1		@ 29 : PWM1 pair 0
		.long Default_Handler+1		@ 30 : PWM1 pair 1
		.long Default_Handler+1		@ 31 : PWM1 pair 2
		.long TMR0_IRQHandler+1		@ 32 : Timer 0
		.long TMR1_IRQHandler+1		@ 33 : Timer 1
		.long TMR2_IRQHandler+1		@ 34 : Timer 2
		.long TMR3_IRQHandler+1		@ 35 : Timer 3
		.long Default_Handler+1		@ 36 : UART0
		.long Default_Handler+1		@ 37 : UART1
		.long Default_Handler+1		@ 38 : I2C0
		.long Default_Handler+1		@ 39 : I2C1
		.long Default_Handler+1		@ 40 : Peripheral DMA
		.long Default_Handler+1		@ 41 : DAC
		.long ADC00_IRQHandler+1 	@ 42 : ADC0 interrupt source 0
		.long Default_Handler+1		@ 43 : ADC0 interrupt source 1
		.long Default_Handler+1		@ 44 : ACMP0 and ACMP1
		.long Default_Handler+1		@ 45 : Reserved
		.long Default_Handler+1		@ 46 : ADC0 interrupt source 2
		.long Default_Handler+1		@ 47 : ADC0 interrupt source 3
		.long Default_Handler+1		@ 48 : UART2
		.long Default_Handler+1		@ 49 : UART3
		.long Default_Handler+1		@ 50 : Reserved
		.long Default_Handler+1		@ 51 : SPI2
		.long Default_Handler+1		@ 52 : Reserved
		.long USBD_IRQHandler+1		@ 53 : USB device
		.long Default_Handler+1		@ 54 : USB host
		.long Default_Handler+1		@ 55 : USB OTG
		.long Default_Handler+1		@ 56 : CAN0
		.long Default_Handler+1		@ 57 : Reserved
		.long Default_Handler+1		@ 58 : Smart card host 0 interrupt
		.long Default_Handler+1		@ 59 : Reserved
		.long Default_Handler+1		@ 60 : Reserved
		.long Default_Handler+1		@ 61 : Reserved
		.long Default_Handler+1		@ 62 : Reserved
		.long Default_Handler+1		@ 63 : Touch key interrupt

@ ===========================================================================

				.section .stack

				.balign 8,0
Stack_Bottom:	.ds.b	0x1000	@ Stack	space
Stack_Top:


@ ===========================================================================
@ Segment type:	Pure code

		.text
		.code 16

@ =============== S U B	R O U T	I N E =======================================

		.global Reset_Handler

Reset_Handler:
		LDR		R0, =0x40000100	@ SYS_REGLCTL
		MOV.W	R1, #0x59		@ Unlock sequence
		STR		R1, [R0]
		MOV.W	R1, #0x16
		STR		R1, [R0]
		MOV.W	R1, #0x88
		STR		R1, [R0]
		LDR		R2, =0x40000024	@ SYS_PORCTL
		MOVW	R1, #0x5AA5		@ POROFF
		STR		R1, [R2]
		LDR		R2, =0x40000200
		LDR		R1, [R2]		@ CLK_PWRCTL
		BIC.W	R1, R1,	#0x1000	@ HTX Crystal type INV
		STR		R1, [R2]
		MOVS	R1, #0			@ Lock registers
		STR		R1, [R0]
		LDR		R0, =(EnableFPU+1)
		BLX		R0 @ EnableFPU
		LDR		R0, =(Startup+1)
		BX		R0 @ Startup

		.balign 4,0
		.pool

@ End of function Reset_Handler

@ =============== S U B	R O U T	I N E =======================================

EnableFPU:
		LDR		R0, =0xE000ED88
		LDR		R1, [R0]	@ CPACR
		ORR.W	R1, R1,	#0x00F00000
		STR		R1, [R0]	@ Full access to coprocessors 10 & 11
		BX		LR

		.balign 4,0
		.pool

@ End of function EnableFPU
@ ---------------------------------------------------------------------------


@ =============== S U B	R O U T	I N E =======================================
@ Unused Handlers
@ ---------------------------------------------------------------------------

NMI_Handler:
SVC_Handler:
DebugMon_Handler:
PendSV_Handler:
SysTick_Handler:
Default_Handler:

		B	.


@ =============== S U B	R O U T	I N E =======================================


Startup:				@ ...
		ldr.w	sp, =Stack_Top

		ldr		r4, =RAMInitTable
		ldr		r5, =RAMInitEnd
2:		cmp 	r4, r5
		beq		1f
		ldmia	r4!, {r0, r1, r2}
		cmp		r0, r1
		beq		3f
		bl		MemCpy2
		b		2b
3:		bl		MemClear2
		b		2b
1:
		ldr	r0, =(Main+1)
		bx	r0

		.balign 4,0
		.pool


@ =============== S U B	R O U T	I N E =======================================

		.global	MemCpy

MemCpy:
		ORR.W	R3, R0,	R1
		LSLS	R3, R3,	#30
		BEQ		loc_200
		B		loc_20E
@ ---------------------------------------------------------------------------

loc_1FA:
		LDMIA	R1!, {R3}
		SUBS	R2, R2,	#4
		STMIA	R0!, {R3}

loc_200:
		CMP		R2, #4
		BCS		loc_1FA
		B		loc_20E
@ ---------------------------------------------------------------------------

loc_206:
		LDRB.W	R3, [R1],#1
		STRB.W	R3, [R0],#1

loc_20E:
		SUBS	R2, R2,	#1
		BCS		loc_206
		BX		LR

@ End of function MemCpy


@ =============== S U B	R O U T	I N E =======================================

		.global MemSet2

MemSet2:
		UXTB	R2, R2
		B		loc_21C
@ ---------------------------------------------------------------------------

loc_218:
		STRB.W	R2, [R0],#1

loc_21C:
		SUBS	R1, R1,	#1
		BCS		loc_218
		BX		LR

@ End of function MemSet2


@ =============== S U B	R O U T	I N E =======================================

		.global MemClear

MemClear:
		MOVS	R2, #0
		B		MemSet2

@ End of function MemClear


@ =============== S U B	R O U T	I N E =======================================


@ void *__fastcall MemSet(void *, char,	unsigned int)

		.global MemSet

MemSet:
		PUSH	{R4,LR}
		MOV		R3, R2
		MOV		R2, R1
		MOV		R4, R0
		MOV		R1, R3
		BL		MemSet2
		MOV		R0, R4
		POP		{R4,PC}
		
@ End of function MemSet


@ =============== S U B	R O U T	I N E =======================================

		.global MemCpy2

MemCpy2:
		B	loc_8A7A
@ ---------------------------------------------------------------------------

loc_8A74:				@ ...
		LDMIA	R0!, {R3}
		SUBS	R2, R2,	#4
		STMIA	R1!, {R3}

loc_8A7A:				@ ...
		CMP	R2, #0
		BNE	loc_8A74
		BX	LR
@ End of function MemCpy2


@ =============== S U B	R O U T	I N E =======================================

		.global MemClear2

MemClear2:
		MOVS	R0, #0
		B	loc_8A8A
@ ---------------------------------------------------------------------------

loc_8A86:				@ ...
		STMIA	R1!, {R0}
		SUBS	R2, R2,	#4

loc_8A8A:				@ ...
		CMP	R2, #0
		BNE	loc_8A86
		BX	LR
@ End of function MemClear2


@ ===========================================================================

		.section	.myevic

		.global	DrawHexDigit

DrawHexDigit:
		and		r2, #0xF
		add		r2, #1
		cmp		r2, #0xB
		blt		1f
		add		r2, #0x5D
1:		mov		r3, #1
		b		DrawImage

		.global	DrawHexDigit2

DrawHexDigit2:
		and		r2, #0xF
		add		r2, #0x1F
		cmp		r2, #0x29
		blt		1f
		add		r2, #0x73
		add		r1, #2
1:		mov		r3, #1
		b		DrawImage

		.global	DrawHexLong

DrawHexLong:
		push	{r4-r8,lr}
		mov		r5, r0
		mov		r6, r1
		mov		r7, r2
		mov		r8, r3
		movs	r4, #28
1:		lsr		r2, r4
		mov		r3, r8
		cbz		r3, 2f
		bl		DrawHexDigit2
		add		r5, #8
		b		3f
2:		bl		DrawHexDigit
		add		r5, #6
3:		mov		r0, r5
		mov		r1, r6
		mov		r2, r7
		subs	r4, #4
		bpl		1b
		pop		{r4-r8,pc}


@ ---------------------------------------------------------------------------
@ BSOD

HardFault_Handler:
MemManage_Handler:
BusFault_Handler:
UsageFault_Handler:

		mov		r0, #4
		mov		r1, lr
		tst		r0, r1
		beq		2f
		mrs		r6, psp
		b		3f
2:		mrs		r6, msp
3:
		mrs		r4, xpsr

		mov		r0, r4
		mov		r1, r6
		bl		Plantouille
		b		.


@ ---------------------------------------------------------------------------
@ ul sqrtul( ul )

		.global	sqrtul

sqrtul:
		fmsr	s0, r0
		fuitos	s0, s0
		fsqrts	s0, s0
		ftouis	s0, s0
		fmrs	r0, s0
		bx		lr

@ ---------------------------------------------------------------------------
@
		.global	GetFirmwareSize

GetFirmwareSize:
		ldr		r2, =RAMInitTable
		ldr		r0, [r2]
		ldr		r1, [r2, #8]
		add		r0, r1
		bx		lr
		
		.balign	4,0
		.pool

@ ---------------------------------------------------------------------------

@ ===========================================================================
		.end

